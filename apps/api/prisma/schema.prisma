// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())

  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String

  columns   Column[]
  members   BoardMember[]
}

model Column {
  id       String   @id @default(uuid())
  title    String
  order    Int
  board    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId  String
  cards    Card[]
  @@index([boardId, order])
}

model Card {
  id          String   @id @default(uuid())
  title       String
  description String?
  order       Int
  labels      String[] @default([])
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  @@index([columnId, order])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified DateTime?
  hashedPwd     String
  name          String?
  image         String?
  color         String   @default("hsl(200 80% 60%)")

  boards        Board[]
  boardMemberships BoardMember[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BoardMember {
  id       String   @id @default(uuid())
  board    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  role     String   @default("member") // "owner", "admin", "member"
  joinedAt DateTime @default(now())

  @@unique([boardId, userId])
}

